<?php

namespace app\components;

use app\components\define\ResponseCode;
use app\components\redis\CacheRedis;
use app\components\redis\UserRedis;
use app\models\Service;
use app\models\User;
use app\models\UserToken;
use Yii;
use yii\web\Controller;
use yii\web\Response;

class BaseController extends Controller
{
    public $uid;
    public $layout = false;
    public $parameter = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $maintenance = isset(\yii::$app->params["maintenance"]) ? \yii::$app->params["maintenance"] : false;
        if ($maintenance) { //维护模式
            $header = Service::authorization();
            if (!User::IsTestUser($header["user_id"])) { //不是测试用户
                $text = isset(\yii::$app->params["maintenance_text"]) ? \yii::$app->params["maintenance_text"] : "We are performing some upgrades at the moment and will be back soon";
                return $this->error($text, 10001);
            }
        }
        $this->GetParameter();
    }


    /**
     * 获取参数
     */
    public function GetParameter()
    {
        $postdata = file_get_contents("php://input");
        if (!empty($postdata)) {
            if ($postdata = json_decode($postdata, true)) {
                $this->parameter = $postdata;
            }
        }
    }

    public function error($msg, $code = 500, $version = null)
    {
        $this->setHttpHeaders('json');
        $return = json_encode(array('code' => $code, 'message' => $msg, 'data' => null));
        Yii::info('return------' . $return, 'interface');
        echo $return;
        exit();
//        yii::$app->end();
    }

    public function ErrResponse(){
        return $this->error(ResponseTool::$message, ResponseTool::$code);
    }

    public function invalid($msg = Words::VersionCheck, $code = 500, $version = null)
    {
        $this->setHttpHeaders('json');

        $return = json_encode(array('code' => $code, 'message' => $msg, 'data' => null));
        Yii::info('return------' . $return, 'interface');
        echo $return;
        exit();
    }

    public function success($data, $message = 'Success', $version = null)
    {
        $this->setHttpHeaders('json');
        $code = 200;

        $return = json_encode(array('code' => $code, 'message' => $message, 'data' => $data));
        Yii::info('return------' . $return, 'interface');

        echo $return;
        exit();
//        yii::$app->end();
    }

    public function checkuser($user_id, $token, $version = null)
    {

        if (empty($user_id)) {
            return $this->error("User id required.");
        }
        if (empty($token)) {
            header('HTTP/1.1 440 Unauthorized');
            header("status: 440 error");
            return $this->error("Token required.", 440);
        }

        //$user = User::find()->where(['and' , "status != 'deleted'" , "guid='".$user_id."'"])->one();
        /*if (!UserRedis::exists($user_id)) {
            Yii::info('user/check------'.$user_id,'my');
            return $this->error("The user doesn't exist.");
        }*/

//        $user_info = UserRedis::getUserInfo($user_id, 'token');
        $user_info = UserToken::Get($user_id);

        if ($token != $user_info) {
            header('HTTP/1.1 440 Unauthorized');
            header("status: 440 error");
            Yii::info('user/check token------' . $token . ' response:' . $user_info, 'redis_error');
            return $this->error('Session has expired. Please Login Again', 440);
        }
//        //检测版本
//        if (!empty($version)){
//            $ve = Version::find()->where(['and' , "status = '0'" ])->orderBy('id desc')->one();
//            if (!empty($ve)){
//                if ($version<$ve->version){
//                    header("status: 505 error");
//                    return $this->error('New version available. Please update your app', 505);
//                }
//            }
//
//        }

        return $user_info;
    }

    public function get_request_method()
    {
        if (!isset($_POST) || empty($_POST)) {
            return $this->error("There was an error with your request.");
            yii::$app->end();
        }
    }

    protected function setHttpHeaders($mime, $encoding = 'utf-8')
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $HTTP_USER_AGENT = isset($_SERVER["HTTP_USER_AGENT"]) ? $_SERVER["HTTP_USER_AGENT"] : "";
        if (strstr($HTTP_USER_AGENT, "MSIE") == false) {
            header("Cache-Control: no-cache");
            header("Pragma: no-cache");
        } else {
            header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
            header("Pragma: public");
        }
        header("Expires: Sat, 26 Jul 1979 05:00:00 GMT");
        header("Content-Encoding: {$encoding}");
        header("Content-Type: text/{$mime}; charset={$encoding}");
        header("Cache-Control: max-age=0");
    }

    /**
     * 验证公共参数
     * @param $version_code
     * @return bool|void
     */
    public function cheackCommonParameter($postdata)
    {
        $device_type = isset($postdata['device_type']) ? trim($postdata['device_type']) : '';
        $device_id = isset($postdata['device_id']) ? trim($postdata['device_id']) : '';
        $version_code = isset($postdata['version_code']) ? trim($postdata['version_code']) : '';
        if (empty($version_code)) {
            return $this->error("Version code required.");
        }
        if (empty($device_type)) {
            return $this->error("Device type required.");
        }
        if (empty($device_id)) {
            return $this->error("Device id required.");
        }

    }

    public function ReturnJson($jsonString)
    {
        $this->setHttpHeaders('json');
        $data = json_decode($jsonString);
        if (!$data) {
            return false;
        }
        $this->success($data);
        yii::$app->end();
        exit();
    }


    /**
     * @param $postdata
     */
    public function CheckRequestSign($postdata)
    {
        if (empty($postdata)) {
            return $this->error("sign incorrect. code: 1", ResponseCode::SignIncorrect);
        }
        $sign = isset($postdata["sign"]) ? trim($postdata["sign"]) : "";
        $ts = isset($postdata["ts"]) ? intval($postdata["ts"]) : "";
        if (empty($sign)) {
            return $this->error("sign incorrect. code: 2", ResponseCode::SignIncorrect);
        }

        if (time() > ($ts + 180)) {
            return $this->error("Request timed out. code: 3", ResponseCode::SignIncorrect);
        }
        unset($postdata["sign"]);
        $requestSign = Util::EncryRequestSignApi($postdata);
        if ($sign != $requestSign) {
            return $this->error("sign incorrect. code: 4", ResponseCode::SignIncorrect);
        }

    }

    /**
     * api 并发控制
     * @param $user_id
     * @param $ts
     * @param string $path
     */
    public function ConcurrentControl($user_id, $ts, $path = "")
    {
        if (!Limit::SetRequestLimit($user_id, $ts, $path)) {
            return $this->error("You call us too busy, take a break please");
        }
    }

    /**
     * 访问频率限制，单位时间内访问上限
     * @param $unique_key
     * @param int $ts 单位时间
     * @param int $num 访问次数
     * @param int $blockTime 拉黑时间（分钟）
     */
    public function controlVisitRate($unique_key, $ts = 1, $num = 3, $blockTime = 5)
    {
        // 判断是否已经拉黑
        $blocked = CacheRedis::checkVisitBlocked($unique_key);
        if ($blocked || CacheRedis::getVisitRate($unique_key) > $num) {
            if (!$blocked) { // 拉黑
                $blockTime *= 60;
                CacheRedis::blockVisit($unique_key, $blockTime);
            }
            return $this->error("You call us too busy, take a break please");
        }
        // 更新访问次数
        CacheRedis::setVisitRate($unique_key, $ts);
    }
}
